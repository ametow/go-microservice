// Code generated by MockGen. DO NOT EDIT.
// Source: yandex-team.ru/bstask/internal/courier (interfaces: CourierRepository)

// Package mock_courier is a generated GoMock package.
package mock_courier

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	courier "yandex-team.ru/bstask/internal/courier"
)

// MockCourierRepository is a mock of CourierRepository interface.
type MockCourierRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCourierRepositoryMockRecorder
}

// MockCourierRepositoryMockRecorder is the mock recorder for MockCourierRepository.
type MockCourierRepositoryMockRecorder struct {
	mock *MockCourierRepository
}

// NewMockCourierRepository creates a new mock instance.
func NewMockCourierRepository(ctrl *gomock.Controller) *MockCourierRepository {
	mock := &MockCourierRepository{ctrl: ctrl}
	mock.recorder = &MockCourierRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourierRepository) EXPECT() *MockCourierRepositoryMockRecorder {
	return m.recorder
}

// CreateCourier mocks base method.
func (m *MockCourierRepository) CreateCourier(arg0 courier.CreateCourierDto) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourier", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCourier indicates an expected call of CreateCourier.
func (mr *MockCourierRepositoryMockRecorder) CreateCourier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourier", reflect.TypeOf((*MockCourierRepository)(nil).CreateCourier), arg0)
}

// GetCourierAssignments mocks base method.
func (m *MockCourierRepository) GetCourierAssignments(arg0 int, arg1 time.Time) ([]courier.GroupOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourierAssignments", arg0, arg1)
	ret0, _ := ret[0].([]courier.GroupOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourierAssignments indicates an expected call of GetCourierAssignments.
func (mr *MockCourierRepositoryMockRecorder) GetCourierAssignments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourierAssignments", reflect.TypeOf((*MockCourierRepository)(nil).GetCourierAssignments), arg0, arg1)
}

// GetCourierByID mocks base method.
func (m *MockCourierRepository) GetCourierByID(arg0 int) (*courier.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourierByID", arg0)
	ret0, _ := ret[0].(*courier.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourierByID indicates an expected call of GetCourierByID.
func (mr *MockCourierRepositoryMockRecorder) GetCourierByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourierByID", reflect.TypeOf((*MockCourierRepository)(nil).GetCourierByID), arg0)
}

// GetCourierOrders mocks base method.
func (m *MockCourierRepository) GetCourierOrders(arg0 int, arg1, arg2 time.Time) ([]courier.OrderCourier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourierOrders", arg0, arg1, arg2)
	ret0, _ := ret[0].([]courier.OrderCourier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourierOrders indicates an expected call of GetCourierOrders.
func (mr *MockCourierRepositoryMockRecorder) GetCourierOrders(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourierOrders", reflect.TypeOf((*MockCourierRepository)(nil).GetCourierOrders), arg0, arg1, arg2)
}

// GetCouriers mocks base method.
func (m *MockCourierRepository) GetCouriers(arg0, arg1 int) ([]courier.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouriers", arg0, arg1)
	ret0, _ := ret[0].([]courier.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouriers indicates an expected call of GetCouriers.
func (mr *MockCourierRepositoryMockRecorder) GetCouriers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouriers", reflect.TypeOf((*MockCourierRepository)(nil).GetCouriers), arg0, arg1)
}

// GetCouriersWithOrdersForDate mocks base method.
func (m *MockCourierRepository) GetCouriersWithOrdersForDate(arg0 time.Time, arg1 int) ([]courier.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouriersWithOrdersForDate", arg0, arg1)
	ret0, _ := ret[0].([]courier.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouriersWithOrdersForDate indicates an expected call of GetCouriersWithOrdersForDate.
func (mr *MockCourierRepositoryMockRecorder) GetCouriersWithOrdersForDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouriersWithOrdersForDate", reflect.TypeOf((*MockCourierRepository)(nil).GetCouriersWithOrdersForDate), arg0, arg1)
}
