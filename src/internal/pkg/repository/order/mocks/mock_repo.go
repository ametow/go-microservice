// Code generated by MockGen. DO NOT EDIT.
// Source: yandex-team.ru/bstask/internal/order (interfaces: OrderRepository)

// Package mock_order is a generated GoMock package.
package mock_order

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	courier "yandex-team.ru/bstask/internal/courier"
	order "yandex-team.ru/bstask/internal/order"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// CompleteOrder mocks base method.
func (m *MockOrderRepository) CompleteOrder(arg0 order.CompleteOrder) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteOrder", arg0)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteOrder indicates an expected call of CompleteOrder.
func (mr *MockOrderRepositoryMockRecorder) CompleteOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteOrder", reflect.TypeOf((*MockOrderRepository)(nil).CompleteOrder), arg0)
}

// CreateOrder mocks base method.
func (m *MockOrderRepository) CreateOrder(arg0 order.CreateOrderDto) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepositoryMockRecorder) CreateOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrder), arg0)
}

// CreateOrderGroup mocks base method.
func (m *MockOrderRepository) CreateOrderGroup(arg0 order.GroupOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderGroup indicates an expected call of CreateOrderGroup.
func (mr *MockOrderRepositoryMockRecorder) CreateOrderGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderGroup", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrderGroup), arg0)
}

// GetCourierAssignments mocks base method.
func (m *MockOrderRepository) GetCourierAssignments(arg0 int, arg1 time.Time) ([]order.GroupOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourierAssignments", arg0, arg1)
	ret0, _ := ret[0].([]order.GroupOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourierAssignments indicates an expected call of GetCourierAssignments.
func (mr *MockOrderRepositoryMockRecorder) GetCourierAssignments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourierAssignments", reflect.TypeOf((*MockOrderRepository)(nil).GetCourierAssignments), arg0, arg1)
}

// GetFreeCouriers mocks base method.
func (m *MockOrderRepository) GetFreeCouriers(arg0 time.Time) ([]courier.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreeCouriers", arg0)
	ret0, _ := ret[0].([]courier.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreeCouriers indicates an expected call of GetFreeCouriers.
func (mr *MockOrderRepositoryMockRecorder) GetFreeCouriers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreeCouriers", reflect.TypeOf((*MockOrderRepository)(nil).GetFreeCouriers), arg0)
}

// GetOrderByID mocks base method.
func (m *MockOrderRepository) GetOrderByID(arg0 int) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", arg0)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderRepositoryMockRecorder) GetOrderByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderByID), arg0)
}

// GetOrders mocks base method.
func (m *MockOrderRepository) GetOrders(arg0, arg1 int) ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1)
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderRepositoryMockRecorder) GetOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetOrders), arg0, arg1)
}

// GetUnassignedOrders mocks base method.
func (m *MockOrderRepository) GetUnassignedOrders() ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnassignedOrders")
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnassignedOrders indicates an expected call of GetUnassignedOrders.
func (mr *MockOrderRepositoryMockRecorder) GetUnassignedOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnassignedOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetUnassignedOrders))
}
